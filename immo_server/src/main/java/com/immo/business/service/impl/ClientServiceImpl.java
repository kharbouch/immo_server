/*
 * Created on 29 dï¿½c. 2015 ( Time 20:53:41 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.immo.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.immo.bean.Bien;
import com.immo.bean.Client;
import com.immo.bean.Tranche;
import com.immo.bean.jpa.BienEntity;
import com.immo.bean.jpa.ClientEntity;
import com.immo.bean.jpa.TrancheEntity;

import java.util.Date;
import java.util.List;
import com.immo.business.service.ClientService;
import com.immo.business.service.mapping.ClientServiceMapper;
import com.immo.data.repository.jpa.ClientJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of ClientService
 */
@Component
@Transactional
public class ClientServiceImpl implements ClientService {

	@Resource
	private ClientJpaRepository clientJpaRepository;

	@Resource
	private ClientServiceMapper clientServiceMapper;
	
	@Override
	public Client findById(Long id) {
		ClientEntity clientEntity = clientJpaRepository.findOne(id);
		return clientServiceMapper.mapClientEntityToClient(clientEntity);
	}

	@Override
	public List<Client> findAll() {
		Iterable<ClientEntity> entities = clientJpaRepository.findAll();
		List<Client> beans = new ArrayList<Client>();
		for(ClientEntity clientEntity : entities) {
			beans.add(clientServiceMapper.mapClientEntityToClient(clientEntity));
		}
		return beans;
	}

	@Override
	public Client save(Client client) {
		return update(client) ;
	}

	@Override
	public Client create(Client client) {
		/*ClientEntity clientEntity = clientJpaRepository.findOne(client.getId());
		if( clientEntity != null ) {
			throw new IllegalStateException("already.exists");
		}*/
		ClientEntity clientEntity = new ClientEntity();
		clientServiceMapper.mapClientToClientEntity(client, clientEntity);
		ClientEntity clientEntitySaved = clientJpaRepository.save(clientEntity);
		return clientServiceMapper.mapClientEntityToClient(clientEntitySaved);
	}

	@Override
	public Client update(Client client) {
		ClientEntity clientEntity = clientJpaRepository.findOne(client.getId());
		clientServiceMapper.mapClientToClientEntity(client, clientEntity);
		ClientEntity clientEntitySaved = clientJpaRepository.save(clientEntity);
		return clientServiceMapper.mapClientEntityToClient(clientEntitySaved);
	}

	@Override
	public void delete(Long id) {
		clientJpaRepository.delete(id);
	}

	public ClientJpaRepository getClientJpaRepository() {
		return clientJpaRepository;
	}

	public void setClientJpaRepository(ClientJpaRepository clientJpaRepository) {
		this.clientJpaRepository = clientJpaRepository;
	}

	public ClientServiceMapper getClientServiceMapper() {
		return clientServiceMapper;
	}

	public void setClientServiceMapper(ClientServiceMapper clientServiceMapper) {
		this.clientServiceMapper = clientServiceMapper;
	}

	@Override
	public Client clientByCin(String cin, Long quote) {
		
		List<ClientEntity> entities = clientJpaRepository.findClientByCin(cin);
		System.out.println("taille du tableau " + entities.size());
		if(entities.size()!=0)
		{
			Client bean = clientServiceMapper.mapClientEntityToClient(entities.get(0));
			if(quote != null)
			{
			bean.setQuote(quote);
			clientServiceMapper.mapClientToClientEntity(bean, entities.get(0));
			ClientEntity clientEntitySaved = clientJpaRepository.save(entities.get(0));
			}
			return bean;
		}
		else
			return null;
	}
}
