/*
 * Created on 29 d�c. 2015 ( Time 20:53:41 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.immo.business.service.impl;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.annotation.Resource;

import com.immo.bean.Bien;
import com.immo.bean.Bienetclients;
import com.immo.bean.Client;
import com.immo.bean.Dossier;
import com.immo.bean.InfoDossier;
import com.immo.bean.Module;
import com.immo.bean.Recette;
import com.immo.bean.TraceDossier;
import com.immo.bean.jpa.BienEntity;
import com.immo.bean.jpa.ClientEntity;
import com.immo.bean.jpa.DossierClientEntity;
import com.immo.bean.jpa.DossierEntity;
import com.immo.bean.jpa.EcheanceEntity;
import com.immo.bean.jpa.ModuleEntity;
import com.immo.bean.jpa.RecetteEntity;
import com.immo.bean.jpa.TraceDossierEntity;

import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import com.immo.business.service.DossierService;
import com.immo.business.service.mapping.BienServiceMapper;
import com.immo.business.service.mapping.ClientServiceMapper;
import com.immo.business.service.mapping.DossierClientServiceMapper;
import com.immo.business.service.mapping.DossierServiceMapper;
import com.immo.business.service.mapping.EcheanceServiceMapper;
import com.immo.business.service.mapping.RecetteServiceMapper;
import com.immo.business.service.mapping.TraceDossierServiceMapper;
import com.immo.data.repository.jpa.BienJpaRepository;
import com.immo.data.repository.jpa.ClientJpaRepository;
import com.immo.data.repository.jpa.DossierClientJpaRepository;
import com.immo.data.repository.jpa.DossierJpaRepository;
import com.immo.data.repository.jpa.EcheanceJpaRepository;
import com.immo.data.repository.jpa.RecetteJpaRepository;
import com.immo.data.repository.jpa.TraceDossierJpaRepository;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of DossierService
 */
@Component
@Transactional
public class DossierServiceImpl implements DossierService {

	@Resource
	private DossierJpaRepository dossierJpaRepository;

	@Resource
	private DossierServiceMapper dossierServiceMapper;
	
	@Resource
	private BienJpaRepository bienJpaRepository;

	@Resource
	private BienServiceMapper bienServiceMapper;
	
	@Resource
	private ClientJpaRepository clientJpaRepository;

	@Resource
	private ClientServiceMapper clientServiceMapper;
	
	@Resource
	private DossierClientJpaRepository dossierClientJpaRepository;

	@Resource
	private DossierClientServiceMapper dossierClientServiceMapper;
	
	@Resource
	private EcheanceJpaRepository echeanceJpaRepository;

	@Resource
	private EcheanceServiceMapper echeanceServiceMapper;
	
	
	@Resource
	private RecetteJpaRepository recetteJpaRepository;

	@Resource
	private RecetteServiceMapper recetteServiceMapper;
	
	@Resource
	private TraceDossierServiceMapper traceDossierServiceMapper;
	
	@Resource
	private TraceDossierJpaRepository traceDossierJpaRepository;
	
	@Override
	public Dossier findById(Long id) {
		DossierEntity dossierEntity = dossierJpaRepository.findOne(id);
		return dossierServiceMapper.mapDossierEntityToDossier(dossierEntity);
	}

	@Override
	public List<Dossier> findAll() {
		Iterable<DossierEntity> entities = dossierJpaRepository.findAll();
		List<Dossier> beans = new ArrayList<Dossier>();
		for(DossierEntity dossierEntity : entities) {
			beans.add(dossierServiceMapper.mapDossierEntityToDossier(dossierEntity));
		}
		return beans;
	}

	@Override
	public Dossier save(Dossier dossier) {
		return update(dossier) ;
	}

	@Override
	public Dossier create(Dossier dossier) {
		/*DossierEntity dossierEntity = dossierJpaRepository.findOne(dossier.getId());
		if( dossierEntity != null ) {
			throw new IllegalStateException("already.exists");
		}*/
		DossierEntity dossierEntity = new DossierEntity();
		dossierServiceMapper.mapDossierToDossierEntity(dossier, dossierEntity);
		DossierEntity dossierEntitySaved = dossierJpaRepository.save(dossierEntity);
		return dossierServiceMapper.mapDossierEntityToDossier(dossierEntitySaved);
	}

	@Override
	public Dossier update(Dossier dossier) {
		DossierEntity dossierEntity = dossierJpaRepository.findOne(dossier.getId());
		dossierServiceMapper.mapDossierToDossierEntity(dossier, dossierEntity);
		DossierEntity dossierEntitySaved = dossierJpaRepository.save(dossierEntity);
		return dossierServiceMapper.mapDossierEntityToDossier(dossierEntitySaved);
	}

	@Override
	public void delete(Long id) {
		dossierJpaRepository.delete(id);
	}

	public DossierJpaRepository getDossierJpaRepository() {
		return dossierJpaRepository;
	}

	public void setDossierJpaRepository(DossierJpaRepository dossierJpaRepository) {
		this.dossierJpaRepository = dossierJpaRepository;
	}

	public DossierServiceMapper getDossierServiceMapper() {
		return dossierServiceMapper;
	}

	public void setDossierServiceMapper(DossierServiceMapper dossierServiceMapper) {
		this.dossierServiceMapper = dossierServiceMapper;
	}
	
	@Override
	public Dossier createdossier(Bienetclients requestWrapper) {
		
		// Modification de l'état du bien
		
		Bien bien = requestWrapper.getBien();
		BienEntity bienentity= bienJpaRepository.findOne(bien.getId());
		bienentity.setEtat("vendu");
		bienJpaRepository.save(bienentity);
		
		
		//Création du nouveau dossier
		
		DossierEntity dossierEntity = new DossierEntity();
		dossierEntity.setRefBien(bienentity.getId());
		dossierEntity.setEtat("actif");
		DossierEntity dossierEntitySaved = dossierJpaRepository.save(dossierEntity);
		
		// Création de l'association dossier_client
		
		List<Client> clients = requestWrapper.getClients();
		for(int i=0;i<clients.size();i++){
			Client client = clients.get(i);
			ClientEntity cliententity = clientJpaRepository.findOne(client.getId());
			DossierClientEntity dossiercliententity = new DossierClientEntity();
			dossiercliententity.setClient(cliententity);
			dossiercliententity.setDossier(dossierEntitySaved);
			dossiercliententity.setQuote(cliententity.getQuote());
			dossierClientJpaRepository.save(dossiercliententity);
		}
		
		//Création des échéances dossier.
		
		GregorianCalendar calendar = new java.util.GregorianCalendar(); 
		
		
		if(bien.getEchMnt1()!=null){
			EcheanceEntity echeanceentity = new EcheanceEntity();
			echeanceentity.setNumero((long) 1);
			echeanceentity.setDossier(dossierEntitySaved);
			echeanceentity.setMontant(bien.getEchMnt1());
			// Initialisé à la date et l'heure courrante. 
			calendar.setTime( new Date() );
			echeanceentity.setDateEcheance(calendar.getTime());
			echeanceJpaRepository.save(echeanceentity);
		}
		
		if(bien.getEchMnt2()!=null){
			EcheanceEntity echeanceentity = new EcheanceEntity();
			echeanceentity.setNumero((long) 2);
			echeanceentity.setDossier(dossierEntitySaved);
			echeanceentity.setMontant(bien.getEchMnt2());
			calendar.setTime( new Date() );
			calendar.add(Calendar.DATE, bien.getEchDelai2().intValue() );
			echeanceentity.setDateEcheance(calendar.getTime());
			if(bien.getEchMnt3()==null) echeanceentity.setObservation("à la livraison.");
			echeanceJpaRepository.save(echeanceentity);
		}
		
		if(bien.getEchMnt3()!=null){
			EcheanceEntity echeanceentity = new EcheanceEntity();
			echeanceentity.setNumero((long) 3);
			echeanceentity.setDossier(dossierEntitySaved);
			echeanceentity.setMontant(bien.getEchMnt3());
			calendar.setTime( new Date() );
			calendar.add(Calendar.DATE, bien.getEchDelai3().intValue() );
			echeanceentity.setDateEcheance(calendar.getTime());
			if(bien.getEchMnt4()==null) echeanceentity.setObservation("à la livraison.");
			echeanceJpaRepository.save(echeanceentity);
		}
		
		if(bien.getEchMnt4()!=null){
			EcheanceEntity echeanceentity = new EcheanceEntity();
			echeanceentity.setNumero((long) 4);
			echeanceentity.setDossier(dossierEntitySaved);
			echeanceentity.setMontant(bien.getEchMnt4());
		/*	calendar.setTime( new Date() );
			calendar.add(Calendar.DATE, bien.getEchDelai3().intValue() );
			echeanceentity.setDateEcheance(calendar.getTime());*/
			echeanceentity.setObservation("à la livraison.");
			echeanceJpaRepository.save(echeanceentity);
		}
		System.out.println(requestWrapper.getBien().getDenomination());
		System.out.println(requestWrapper.getClients().get(0).getNomClient());
		System.out.println(dossierEntitySaved.getId());
		return dossierServiceMapper.mapDossierEntityToDossier(dossierEntitySaved);
		//return null;
	}
	
	@Override
	public List<InfoDossier> findDossier(Long id){
		List<InfoDossier> beans =  new ArrayList<InfoDossier>(dossierJpaRepository.findDossier(id)) ;
		return beans; 
	}

	@Override
	public void annuleDossier(Dossier dossier) {
		// TODO Auto-generated method stub
		
		GregorianCalendar calendar = new java.util.GregorianCalendar();
		//dossier inactif
		dossier.setEtat("inactif");
		DossierEntity dossierEntity = dossierJpaRepository.findOne(dossier.getId());
		dossierServiceMapper.mapDossierToDossierEntity(dossier, dossierEntity);
	    dossierJpaRepository.save(dossierEntity);
	    
		//Liberer le bien 
		BienEntity bienEntity = bienJpaRepository.findOne(dossier.getRefBien());
		Bien b = bienServiceMapper.mapBienEntityToBien(bienEntity);
		b.setEtat("libre");
		bienServiceMapper.mapBienToBienEntity(b, bienEntity);
		bienJpaRepository.save(bienEntity);
		
		//paiement annuler: 
		Iterable<RecetteEntity> entities = recetteJpaRepository.findByDossier(dossierEntity);
		List<Recette> beans = new ArrayList<Recette>();
		for(RecetteEntity recetteEntity : entities) {
		Recette r= 	recetteServiceMapper.mapRecetteEntityToRecette(recetteEntity);
		r.setEtat("annule");
		recetteServiceMapper.mapRecetteToRecetteEntity(r, recetteEntity);
		recetteJpaRepository.save(recetteEntity);
		}
		
		//Save trace desistement
		TraceDossierEntity traceDossierEntity = new TraceDossierEntity();
		traceDossierEntity.setBien(bienEntity);
		traceDossierEntity.setDossier(dossierEntity);
		traceDossierEntity.setAction("Desistement definitive");
		traceDossierEntity.setDescription("Desistement definitive");
		calendar.setTime( new Date() );
		traceDossierEntity.setDateCreation(calendar.getTime() );
		traceDossierEntity.setDateMaj(calendar.getTime() );

		traceDossierJpaRepository.save(traceDossierEntity);

	}

	@Override
	public List<Object>  venteJournee(){
		List<Object> bean =  dossierJpaRepository.venteJournee();
		return bean;
	}
	

}
