/*
 * Created on 29 déc. 2015 ( Time 20:53:41 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.immo.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import com.immo.bean.DossierClient;
import com.immo.bean.jpa.DossierClientEntity;
import com.immo.bean.jpa.ClientEntity;
import com.immo.bean.jpa.DossierEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class DossierClientServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public DossierClientServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'DossierClientEntity' to 'DossierClient'
	 * @param dossierClientEntity
	 */
	public DossierClient mapDossierClientEntityToDossierClient(DossierClientEntity dossierClientEntity) {
		if(dossierClientEntity == null) {
			return null;
		}

		//--- Generic mapping 
		DossierClient dossierClient = map(dossierClientEntity, DossierClient.class);

		//--- Link mapping ( link to Client )
		if(dossierClientEntity.getClient() != null) {
			dossierClient.setRefClient(dossierClientEntity.getClient().getId());
		}
		//--- Link mapping ( link to Dossier )
		if(dossierClientEntity.getDossier() != null) {
			dossierClient.setRefDossier(dossierClientEntity.getDossier().getId());
		}
		return dossierClient;
	}
	
	/**
	 * Mapping from 'DossierClient' to 'DossierClientEntity'
	 * @param dossierClient
	 * @param dossierClientEntity
	 */
	public void mapDossierClientToDossierClientEntity(DossierClient dossierClient, DossierClientEntity dossierClientEntity) {
		if(dossierClient == null) {
			return;
		}

		//--- Generic mapping 
		map(dossierClient, dossierClientEntity);

		//--- Link mapping ( link : dossierClient )
		if( hasLinkToClient(dossierClient) ) {
			ClientEntity client1 = new ClientEntity();
			client1.setId( dossierClient.getRefClient() );
			dossierClientEntity.setClient( client1 );
		} else {
			dossierClientEntity.setClient( null );
		}

		//--- Link mapping ( link : dossierClient )
		if( hasLinkToDossier(dossierClient) ) {
			DossierEntity dossier2 = new DossierEntity();
			dossier2.setId( dossierClient.getRefDossier() );
			dossierClientEntity.setDossier( dossier2 );
		} else {
			dossierClientEntity.setDossier( null );
		}

	}
	
	/**
	 * Verify that Client id is valid.
	 * @param Client Client
	 * @return boolean
	 */
	private boolean hasLinkToClient(DossierClient dossierClient) {
		if(dossierClient.getRefClient() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Dossier id is valid.
	 * @param Dossier Dossier
	 * @return boolean
	 */
	private boolean hasLinkToDossier(DossierClient dossierClient) {
		if(dossierClient.getRefDossier() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}