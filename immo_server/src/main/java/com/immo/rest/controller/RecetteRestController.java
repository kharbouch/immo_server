/*
 * Created on 29 dï¿½c. 2015 ( Time 20:53:09 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.immo.rest.controller;

import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutionException;

import javax.annotation.Resource;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.immo.bean.Dossier;
import com.immo.bean.Recette;
import com.immo.bean.Utilisateur;
import com.immo.business.service.RecetteService;
import com.immo.web.listitem.RecetteListItem;

/**
 * Spring MVC controller for 'Recette' management.
 */
@Controller
public class RecetteRestController {

	@Resource
	private RecetteService recetteService;
	
	@RequestMapping( value="/items/recette",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<RecetteListItem> findAllAsListItems() {
		List<Recette> list = recetteService.findAll();
		List<RecetteListItem> items = new LinkedList<RecetteListItem>();
		for ( Recette recette : list ) {
			items.add(new RecetteListItem( recette ) );
		}
		return items;
	}
	
	@RequestMapping( value="/recette",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<Recette> findAll() {
		return recetteService.findAll();
	}

	@RequestMapping( value="/recette/{id}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Recette findOne(@PathVariable("id") Long id) {
		return recetteService.findById(id);
	}
	
	@RequestMapping( value="/recette",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Recette create(@RequestBody Recette recette) {
		return recetteService.create(recette);
	}

	@RequestMapping( value="/recette/{id}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Recette update(@PathVariable("id") Long id, @RequestBody Recette recette) {
		System.out.println("la val de id "+id);
		if(id == 0)
		 recette.setEtat("annule");
		return recetteService.update(recette);
		
	}

	@RequestMapping( value="/recette/{id}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("id") Long id) {
		recetteService.delete(id);
	}
	
	@RequestMapping( value="/recetteByDossier",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<Recette> findByDossier(@RequestBody Dossier dossier) {
		//System.out.println("dossier val:"+ dossier.getId());
		System.out.println("la val de id ");
		return recetteService.findByDossier(dossier);
	}
	
	@RequestMapping( value="/findByNumBanque",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<Recette> findByNumAndBanque(@RequestBody Recette recette) throws InterruptedException, ExecutionException {
		/*System.out.println("val de mail :"+ mail);
		if(mail.contains("m@m")) return true;
		System.out.println("la val de user : " +utilisateur.getLogin() + utilisateur.getPassword());
		System.out.println(utilisateurService.findByUserNameAndPass(utilisateur));*/
		return recetteService.findByNumAndBanque(recette);
	
	}
	

}
