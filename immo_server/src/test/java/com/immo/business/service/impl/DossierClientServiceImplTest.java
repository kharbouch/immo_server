/*
 * Created on 29 déc. 2015 ( Time 20:53:41 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.immo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.immo.bean.DossierClient;
import com.immo.bean.jpa.DossierClientEntity;
import com.immo.business.service.mapping.DossierClientServiceMapper;
import com.immo.data.repository.jpa.DossierClientJpaRepository;
import com.immo.test.DossierClientFactoryForTest;
import com.immo.test.DossierClientEntityFactoryForTest;
import com.immo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of DossierClientService
 */
@RunWith(MockitoJUnitRunner.class)
public class DossierClientServiceImplTest {

	@InjectMocks
	private DossierClientServiceImpl dossierClientService;
	@Mock
	private DossierClientJpaRepository dossierClientJpaRepository;
	@Mock
	private DossierClientServiceMapper dossierClientServiceMapper;
	
	private DossierClientFactoryForTest dossierClientFactoryForTest = new DossierClientFactoryForTest();

	private DossierClientEntityFactoryForTest dossierClientEntityFactoryForTest = new DossierClientEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		DossierClientEntity dossierClientEntity = dossierClientJpaRepository.findOne(id);
		
		DossierClient dossierClient = dossierClientFactoryForTest.newDossierClient();
		when(dossierClientServiceMapper.mapDossierClientEntityToDossierClient(dossierClientEntity)).thenReturn(dossierClient);

		// When
		DossierClient dossierClientFound = dossierClientService.findById(id);

		// Then
		assertEquals(dossierClient.getId(),dossierClientFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<DossierClientEntity> dossierClientEntitys = new ArrayList<DossierClientEntity>();
		DossierClientEntity dossierClientEntity1 = dossierClientEntityFactoryForTest.newDossierClientEntity();
		dossierClientEntitys.add(dossierClientEntity1);
		DossierClientEntity dossierClientEntity2 = dossierClientEntityFactoryForTest.newDossierClientEntity();
		dossierClientEntitys.add(dossierClientEntity2);
		when(dossierClientJpaRepository.findAll()).thenReturn(dossierClientEntitys);
		
		DossierClient dossierClient1 = dossierClientFactoryForTest.newDossierClient();
		when(dossierClientServiceMapper.mapDossierClientEntityToDossierClient(dossierClientEntity1)).thenReturn(dossierClient1);
		DossierClient dossierClient2 = dossierClientFactoryForTest.newDossierClient();
		when(dossierClientServiceMapper.mapDossierClientEntityToDossierClient(dossierClientEntity2)).thenReturn(dossierClient2);

		// When
		List<DossierClient> dossierClientsFounds = dossierClientService.findAll();

		// Then
		assertTrue(dossierClient1 == dossierClientsFounds.get(0));
		assertTrue(dossierClient2 == dossierClientsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		DossierClient dossierClient = dossierClientFactoryForTest.newDossierClient();

		DossierClientEntity dossierClientEntity = dossierClientEntityFactoryForTest.newDossierClientEntity();
		when(dossierClientJpaRepository.findOne(dossierClient.getId())).thenReturn(null);
		
		dossierClientEntity = new DossierClientEntity();
		dossierClientServiceMapper.mapDossierClientToDossierClientEntity(dossierClient, dossierClientEntity);
		DossierClientEntity dossierClientEntitySaved = dossierClientJpaRepository.save(dossierClientEntity);
		
		DossierClient dossierClientSaved = dossierClientFactoryForTest.newDossierClient();
		when(dossierClientServiceMapper.mapDossierClientEntityToDossierClient(dossierClientEntitySaved)).thenReturn(dossierClientSaved);

		// When
		DossierClient dossierClientResult = dossierClientService.create(dossierClient);

		// Then
		assertTrue(dossierClientResult == dossierClientSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		DossierClient dossierClient = dossierClientFactoryForTest.newDossierClient();

		DossierClientEntity dossierClientEntity = dossierClientEntityFactoryForTest.newDossierClientEntity();
		when(dossierClientJpaRepository.findOne(dossierClient.getId())).thenReturn(dossierClientEntity);

		// When
		Exception exception = null;
		try {
			dossierClientService.create(dossierClient);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		DossierClient dossierClient = dossierClientFactoryForTest.newDossierClient();

		DossierClientEntity dossierClientEntity = dossierClientEntityFactoryForTest.newDossierClientEntity();
		when(dossierClientJpaRepository.findOne(dossierClient.getId())).thenReturn(dossierClientEntity);
		
		DossierClientEntity dossierClientEntitySaved = dossierClientEntityFactoryForTest.newDossierClientEntity();
		when(dossierClientJpaRepository.save(dossierClientEntity)).thenReturn(dossierClientEntitySaved);
		
		DossierClient dossierClientSaved = dossierClientFactoryForTest.newDossierClient();
		when(dossierClientServiceMapper.mapDossierClientEntityToDossierClient(dossierClientEntitySaved)).thenReturn(dossierClientSaved);

		// When
		DossierClient dossierClientResult = dossierClientService.update(dossierClient);

		// Then
		verify(dossierClientServiceMapper).mapDossierClientToDossierClientEntity(dossierClient, dossierClientEntity);
		assertTrue(dossierClientResult == dossierClientSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		dossierClientService.delete(id);

		// Then
		verify(dossierClientJpaRepository).delete(id);
		
	}

}
