/*
 * Created on 29 déc. 2015 ( Time 20:53:41 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.immo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.immo.bean.Dossier;
import com.immo.bean.jpa.DossierEntity;
import java.util.Date;
import java.util.List;
import com.immo.business.service.mapping.DossierServiceMapper;
import com.immo.data.repository.jpa.DossierJpaRepository;
import com.immo.test.DossierFactoryForTest;
import com.immo.test.DossierEntityFactoryForTest;
import com.immo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of DossierService
 */
@RunWith(MockitoJUnitRunner.class)
public class DossierServiceImplTest {

	@InjectMocks
	private DossierServiceImpl dossierService;
	@Mock
	private DossierJpaRepository dossierJpaRepository;
	@Mock
	private DossierServiceMapper dossierServiceMapper;
	
	private DossierFactoryForTest dossierFactoryForTest = new DossierFactoryForTest();

	private DossierEntityFactoryForTest dossierEntityFactoryForTest = new DossierEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		DossierEntity dossierEntity = dossierJpaRepository.findOne(id);
		
		Dossier dossier = dossierFactoryForTest.newDossier();
		when(dossierServiceMapper.mapDossierEntityToDossier(dossierEntity)).thenReturn(dossier);

		// When
		Dossier dossierFound = dossierService.findById(id);

		// Then
		assertEquals(dossier.getId(),dossierFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<DossierEntity> dossierEntitys = new ArrayList<DossierEntity>();
		DossierEntity dossierEntity1 = dossierEntityFactoryForTest.newDossierEntity();
		dossierEntitys.add(dossierEntity1);
		DossierEntity dossierEntity2 = dossierEntityFactoryForTest.newDossierEntity();
		dossierEntitys.add(dossierEntity2);
		when(dossierJpaRepository.findAll()).thenReturn(dossierEntitys);
		
		Dossier dossier1 = dossierFactoryForTest.newDossier();
		when(dossierServiceMapper.mapDossierEntityToDossier(dossierEntity1)).thenReturn(dossier1);
		Dossier dossier2 = dossierFactoryForTest.newDossier();
		when(dossierServiceMapper.mapDossierEntityToDossier(dossierEntity2)).thenReturn(dossier2);

		// When
		List<Dossier> dossiersFounds = dossierService.findAll();

		// Then
		assertTrue(dossier1 == dossiersFounds.get(0));
		assertTrue(dossier2 == dossiersFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Dossier dossier = dossierFactoryForTest.newDossier();

		DossierEntity dossierEntity = dossierEntityFactoryForTest.newDossierEntity();
		when(dossierJpaRepository.findOne(dossier.getId())).thenReturn(null);
		
		dossierEntity = new DossierEntity();
		dossierServiceMapper.mapDossierToDossierEntity(dossier, dossierEntity);
		DossierEntity dossierEntitySaved = dossierJpaRepository.save(dossierEntity);
		
		Dossier dossierSaved = dossierFactoryForTest.newDossier();
		when(dossierServiceMapper.mapDossierEntityToDossier(dossierEntitySaved)).thenReturn(dossierSaved);

		// When
		Dossier dossierResult = dossierService.create(dossier);

		// Then
		assertTrue(dossierResult == dossierSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Dossier dossier = dossierFactoryForTest.newDossier();

		DossierEntity dossierEntity = dossierEntityFactoryForTest.newDossierEntity();
		when(dossierJpaRepository.findOne(dossier.getId())).thenReturn(dossierEntity);

		// When
		Exception exception = null;
		try {
			dossierService.create(dossier);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Dossier dossier = dossierFactoryForTest.newDossier();

		DossierEntity dossierEntity = dossierEntityFactoryForTest.newDossierEntity();
		when(dossierJpaRepository.findOne(dossier.getId())).thenReturn(dossierEntity);
		
		DossierEntity dossierEntitySaved = dossierEntityFactoryForTest.newDossierEntity();
		when(dossierJpaRepository.save(dossierEntity)).thenReturn(dossierEntitySaved);
		
		Dossier dossierSaved = dossierFactoryForTest.newDossier();
		when(dossierServiceMapper.mapDossierEntityToDossier(dossierEntitySaved)).thenReturn(dossierSaved);

		// When
		Dossier dossierResult = dossierService.update(dossier);

		// Then
		verify(dossierServiceMapper).mapDossierToDossierEntity(dossier, dossierEntity);
		assertTrue(dossierResult == dossierSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		dossierService.delete(id);

		// Then
		verify(dossierJpaRepository).delete(id);
		
	}

}
