/*
 * Created on 29 déc. 2015 ( Time 20:53:41 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.immo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.immo.bean.Echeance;
import com.immo.bean.jpa.EcheanceEntity;
import java.util.Date;
import com.immo.business.service.mapping.EcheanceServiceMapper;
import com.immo.data.repository.jpa.EcheanceJpaRepository;
import com.immo.test.EcheanceFactoryForTest;
import com.immo.test.EcheanceEntityFactoryForTest;
import com.immo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of EcheanceService
 */
@RunWith(MockitoJUnitRunner.class)
public class EcheanceServiceImplTest {

	@InjectMocks
	private EcheanceServiceImpl echeanceService;
	@Mock
	private EcheanceJpaRepository echeanceJpaRepository;
	@Mock
	private EcheanceServiceMapper echeanceServiceMapper;
	
	private EcheanceFactoryForTest echeanceFactoryForTest = new EcheanceFactoryForTest();

	private EcheanceEntityFactoryForTest echeanceEntityFactoryForTest = new EcheanceEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		EcheanceEntity echeanceEntity = echeanceJpaRepository.findOne(id);
		
		Echeance echeance = echeanceFactoryForTest.newEcheance();
		when(echeanceServiceMapper.mapEcheanceEntityToEcheance(echeanceEntity)).thenReturn(echeance);

		// When
		Echeance echeanceFound = echeanceService.findById(id);

		// Then
		assertEquals(echeance.getId(),echeanceFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<EcheanceEntity> echeanceEntitys = new ArrayList<EcheanceEntity>();
		EcheanceEntity echeanceEntity1 = echeanceEntityFactoryForTest.newEcheanceEntity();
		echeanceEntitys.add(echeanceEntity1);
		EcheanceEntity echeanceEntity2 = echeanceEntityFactoryForTest.newEcheanceEntity();
		echeanceEntitys.add(echeanceEntity2);
		when(echeanceJpaRepository.findAll()).thenReturn(echeanceEntitys);
		
		Echeance echeance1 = echeanceFactoryForTest.newEcheance();
		when(echeanceServiceMapper.mapEcheanceEntityToEcheance(echeanceEntity1)).thenReturn(echeance1);
		Echeance echeance2 = echeanceFactoryForTest.newEcheance();
		when(echeanceServiceMapper.mapEcheanceEntityToEcheance(echeanceEntity2)).thenReturn(echeance2);

		// When
		List<Echeance> echeancesFounds = echeanceService.findAll();

		// Then
		assertTrue(echeance1 == echeancesFounds.get(0));
		assertTrue(echeance2 == echeancesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Echeance echeance = echeanceFactoryForTest.newEcheance();

		EcheanceEntity echeanceEntity = echeanceEntityFactoryForTest.newEcheanceEntity();
		when(echeanceJpaRepository.findOne(echeance.getId())).thenReturn(null);
		
		echeanceEntity = new EcheanceEntity();
		echeanceServiceMapper.mapEcheanceToEcheanceEntity(echeance, echeanceEntity);
		EcheanceEntity echeanceEntitySaved = echeanceJpaRepository.save(echeanceEntity);
		
		Echeance echeanceSaved = echeanceFactoryForTest.newEcheance();
		when(echeanceServiceMapper.mapEcheanceEntityToEcheance(echeanceEntitySaved)).thenReturn(echeanceSaved);

		// When
		Echeance echeanceResult = echeanceService.create(echeance);

		// Then
		assertTrue(echeanceResult == echeanceSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Echeance echeance = echeanceFactoryForTest.newEcheance();

		EcheanceEntity echeanceEntity = echeanceEntityFactoryForTest.newEcheanceEntity();
		when(echeanceJpaRepository.findOne(echeance.getId())).thenReturn(echeanceEntity);

		// When
		Exception exception = null;
		try {
			echeanceService.create(echeance);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Echeance echeance = echeanceFactoryForTest.newEcheance();

		EcheanceEntity echeanceEntity = echeanceEntityFactoryForTest.newEcheanceEntity();
		when(echeanceJpaRepository.findOne(echeance.getId())).thenReturn(echeanceEntity);
		
		EcheanceEntity echeanceEntitySaved = echeanceEntityFactoryForTest.newEcheanceEntity();
		when(echeanceJpaRepository.save(echeanceEntity)).thenReturn(echeanceEntitySaved);
		
		Echeance echeanceSaved = echeanceFactoryForTest.newEcheance();
		when(echeanceServiceMapper.mapEcheanceEntityToEcheance(echeanceEntitySaved)).thenReturn(echeanceSaved);

		// When
		Echeance echeanceResult = echeanceService.update(echeance);

		// Then
		verify(echeanceServiceMapper).mapEcheanceToEcheanceEntity(echeance, echeanceEntity);
		assertTrue(echeanceResult == echeanceSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		echeanceService.delete(id);

		// Then
		verify(echeanceJpaRepository).delete(id);
		
	}

}
