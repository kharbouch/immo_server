/*
 * Created on 29 déc. 2015 ( Time 20:53:41 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.immo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.immo.bean.ModuleProfil;
import com.immo.bean.jpa.ModuleProfilEntity;
import java.util.Date;
import com.immo.business.service.mapping.ModuleProfilServiceMapper;
import com.immo.data.repository.jpa.ModuleProfilJpaRepository;
import com.immo.test.ModuleProfilFactoryForTest;
import com.immo.test.ModuleProfilEntityFactoryForTest;
import com.immo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ModuleProfilService
 */
@RunWith(MockitoJUnitRunner.class)
public class ModuleProfilServiceImplTest {

	@InjectMocks
	private ModuleProfilServiceImpl moduleProfilService;
	@Mock
	private ModuleProfilJpaRepository moduleProfilJpaRepository;
	@Mock
	private ModuleProfilServiceMapper moduleProfilServiceMapper;
	
	private ModuleProfilFactoryForTest moduleProfilFactoryForTest = new ModuleProfilFactoryForTest();

	private ModuleProfilEntityFactoryForTest moduleProfilEntityFactoryForTest = new ModuleProfilEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		ModuleProfilEntity moduleProfilEntity = moduleProfilJpaRepository.findOne(id);
		
		ModuleProfil moduleProfil = moduleProfilFactoryForTest.newModuleProfil();
		when(moduleProfilServiceMapper.mapModuleProfilEntityToModuleProfil(moduleProfilEntity)).thenReturn(moduleProfil);

		// When
		ModuleProfil moduleProfilFound = moduleProfilService.findById(id);

		// Then
		assertEquals(moduleProfil.getId(),moduleProfilFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ModuleProfilEntity> moduleProfilEntitys = new ArrayList<ModuleProfilEntity>();
		ModuleProfilEntity moduleProfilEntity1 = moduleProfilEntityFactoryForTest.newModuleProfilEntity();
		moduleProfilEntitys.add(moduleProfilEntity1);
		ModuleProfilEntity moduleProfilEntity2 = moduleProfilEntityFactoryForTest.newModuleProfilEntity();
		moduleProfilEntitys.add(moduleProfilEntity2);
		when(moduleProfilJpaRepository.findAll()).thenReturn(moduleProfilEntitys);
		
		ModuleProfil moduleProfil1 = moduleProfilFactoryForTest.newModuleProfil();
		when(moduleProfilServiceMapper.mapModuleProfilEntityToModuleProfil(moduleProfilEntity1)).thenReturn(moduleProfil1);
		ModuleProfil moduleProfil2 = moduleProfilFactoryForTest.newModuleProfil();
		when(moduleProfilServiceMapper.mapModuleProfilEntityToModuleProfil(moduleProfilEntity2)).thenReturn(moduleProfil2);

		// When
		List<ModuleProfil> moduleProfilsFounds = moduleProfilService.findAll();

		// Then
		assertTrue(moduleProfil1 == moduleProfilsFounds.get(0));
		assertTrue(moduleProfil2 == moduleProfilsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		ModuleProfil moduleProfil = moduleProfilFactoryForTest.newModuleProfil();

		ModuleProfilEntity moduleProfilEntity = moduleProfilEntityFactoryForTest.newModuleProfilEntity();
		when(moduleProfilJpaRepository.findOne(moduleProfil.getId())).thenReturn(null);
		
		moduleProfilEntity = new ModuleProfilEntity();
		moduleProfilServiceMapper.mapModuleProfilToModuleProfilEntity(moduleProfil, moduleProfilEntity);
		ModuleProfilEntity moduleProfilEntitySaved = moduleProfilJpaRepository.save(moduleProfilEntity);
		
		ModuleProfil moduleProfilSaved = moduleProfilFactoryForTest.newModuleProfil();
		when(moduleProfilServiceMapper.mapModuleProfilEntityToModuleProfil(moduleProfilEntitySaved)).thenReturn(moduleProfilSaved);

		// When
		ModuleProfil moduleProfilResult = moduleProfilService.create(moduleProfil);

		// Then
		assertTrue(moduleProfilResult == moduleProfilSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		ModuleProfil moduleProfil = moduleProfilFactoryForTest.newModuleProfil();

		ModuleProfilEntity moduleProfilEntity = moduleProfilEntityFactoryForTest.newModuleProfilEntity();
		when(moduleProfilJpaRepository.findOne(moduleProfil.getId())).thenReturn(moduleProfilEntity);

		// When
		Exception exception = null;
		try {
			moduleProfilService.create(moduleProfil);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		ModuleProfil moduleProfil = moduleProfilFactoryForTest.newModuleProfil();

		ModuleProfilEntity moduleProfilEntity = moduleProfilEntityFactoryForTest.newModuleProfilEntity();
		when(moduleProfilJpaRepository.findOne(moduleProfil.getId())).thenReturn(moduleProfilEntity);
		
		ModuleProfilEntity moduleProfilEntitySaved = moduleProfilEntityFactoryForTest.newModuleProfilEntity();
		when(moduleProfilJpaRepository.save(moduleProfilEntity)).thenReturn(moduleProfilEntitySaved);
		
		ModuleProfil moduleProfilSaved = moduleProfilFactoryForTest.newModuleProfil();
		when(moduleProfilServiceMapper.mapModuleProfilEntityToModuleProfil(moduleProfilEntitySaved)).thenReturn(moduleProfilSaved);

		// When
		ModuleProfil moduleProfilResult = moduleProfilService.update(moduleProfil);

		// Then
		verify(moduleProfilServiceMapper).mapModuleProfilToModuleProfilEntity(moduleProfil, moduleProfilEntity);
		assertTrue(moduleProfilResult == moduleProfilSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		moduleProfilService.delete(id);

		// Then
		verify(moduleProfilJpaRepository).delete(id);
		
	}

}
