/*
 * Created on 29 déc. 2015 ( Time 20:53:41 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.immo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.immo.bean.Module;
import com.immo.bean.jpa.ModuleEntity;
import java.util.Date;
import java.util.List;
import com.immo.business.service.mapping.ModuleServiceMapper;
import com.immo.data.repository.jpa.ModuleJpaRepository;
import com.immo.test.ModuleFactoryForTest;
import com.immo.test.ModuleEntityFactoryForTest;
import com.immo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ModuleService
 */
@RunWith(MockitoJUnitRunner.class)
public class ModuleServiceImplTest {

	@InjectMocks
	private ModuleServiceImpl moduleService;
	@Mock
	private ModuleJpaRepository moduleJpaRepository;
	@Mock
	private ModuleServiceMapper moduleServiceMapper;
	
	private ModuleFactoryForTest moduleFactoryForTest = new ModuleFactoryForTest();

	private ModuleEntityFactoryForTest moduleEntityFactoryForTest = new ModuleEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		ModuleEntity moduleEntity = moduleJpaRepository.findOne(id);
		
		Module module = moduleFactoryForTest.newModule();
		when(moduleServiceMapper.mapModuleEntityToModule(moduleEntity)).thenReturn(module);

		// When
		Module moduleFound = moduleService.findById(id);

		// Then
		assertEquals(module.getId(),moduleFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ModuleEntity> moduleEntitys = new ArrayList<ModuleEntity>();
		ModuleEntity moduleEntity1 = moduleEntityFactoryForTest.newModuleEntity();
		moduleEntitys.add(moduleEntity1);
		ModuleEntity moduleEntity2 = moduleEntityFactoryForTest.newModuleEntity();
		moduleEntitys.add(moduleEntity2);
		when(moduleJpaRepository.findAll()).thenReturn(moduleEntitys);
		
		Module module1 = moduleFactoryForTest.newModule();
		when(moduleServiceMapper.mapModuleEntityToModule(moduleEntity1)).thenReturn(module1);
		Module module2 = moduleFactoryForTest.newModule();
		when(moduleServiceMapper.mapModuleEntityToModule(moduleEntity2)).thenReturn(module2);

		// When
		List<Module> modulesFounds = moduleService.findAll();

		// Then
		assertTrue(module1 == modulesFounds.get(0));
		assertTrue(module2 == modulesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Module module = moduleFactoryForTest.newModule();

		ModuleEntity moduleEntity = moduleEntityFactoryForTest.newModuleEntity();
		when(moduleJpaRepository.findOne(module.getId())).thenReturn(null);
		
		moduleEntity = new ModuleEntity();
		moduleServiceMapper.mapModuleToModuleEntity(module, moduleEntity);
		ModuleEntity moduleEntitySaved = moduleJpaRepository.save(moduleEntity);
		
		Module moduleSaved = moduleFactoryForTest.newModule();
		when(moduleServiceMapper.mapModuleEntityToModule(moduleEntitySaved)).thenReturn(moduleSaved);

		// When
		Module moduleResult = moduleService.create(module);

		// Then
		assertTrue(moduleResult == moduleSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Module module = moduleFactoryForTest.newModule();

		ModuleEntity moduleEntity = moduleEntityFactoryForTest.newModuleEntity();
		when(moduleJpaRepository.findOne(module.getId())).thenReturn(moduleEntity);

		// When
		Exception exception = null;
		try {
			moduleService.create(module);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Module module = moduleFactoryForTest.newModule();

		ModuleEntity moduleEntity = moduleEntityFactoryForTest.newModuleEntity();
		when(moduleJpaRepository.findOne(module.getId())).thenReturn(moduleEntity);
		
		ModuleEntity moduleEntitySaved = moduleEntityFactoryForTest.newModuleEntity();
		when(moduleJpaRepository.save(moduleEntity)).thenReturn(moduleEntitySaved);
		
		Module moduleSaved = moduleFactoryForTest.newModule();
		when(moduleServiceMapper.mapModuleEntityToModule(moduleEntitySaved)).thenReturn(moduleSaved);

		// When
		Module moduleResult = moduleService.update(module);

		// Then
		verify(moduleServiceMapper).mapModuleToModuleEntity(module, moduleEntity);
		assertTrue(moduleResult == moduleSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		moduleService.delete(id);

		// Then
		verify(moduleJpaRepository).delete(id);
		
	}

}
