/*
 * Created on 29 déc. 2015 ( Time 20:53:42 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.immo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.immo.bean.Recette;
import com.immo.bean.jpa.RecetteEntity;
import java.util.Date;
import com.immo.business.service.mapping.RecetteServiceMapper;
import com.immo.data.repository.jpa.RecetteJpaRepository;
import com.immo.test.RecetteFactoryForTest;
import com.immo.test.RecetteEntityFactoryForTest;
import com.immo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of RecetteService
 */
@RunWith(MockitoJUnitRunner.class)
public class RecetteServiceImplTest {

	@InjectMocks
	private RecetteServiceImpl recetteService;
	@Mock
	private RecetteJpaRepository recetteJpaRepository;
	@Mock
	private RecetteServiceMapper recetteServiceMapper;
	
	private RecetteFactoryForTest recetteFactoryForTest = new RecetteFactoryForTest();

	private RecetteEntityFactoryForTest recetteEntityFactoryForTest = new RecetteEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		RecetteEntity recetteEntity = recetteJpaRepository.findOne(id);
		
		Recette recette = recetteFactoryForTest.newRecette();
		when(recetteServiceMapper.mapRecetteEntityToRecette(recetteEntity)).thenReturn(recette);

		// When
		Recette recetteFound = recetteService.findById(id);

		// Then
		assertEquals(recette.getId(),recetteFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<RecetteEntity> recetteEntitys = new ArrayList<RecetteEntity>();
		RecetteEntity recetteEntity1 = recetteEntityFactoryForTest.newRecetteEntity();
		recetteEntitys.add(recetteEntity1);
		RecetteEntity recetteEntity2 = recetteEntityFactoryForTest.newRecetteEntity();
		recetteEntitys.add(recetteEntity2);
		when(recetteJpaRepository.findAll()).thenReturn(recetteEntitys);
		
		Recette recette1 = recetteFactoryForTest.newRecette();
		when(recetteServiceMapper.mapRecetteEntityToRecette(recetteEntity1)).thenReturn(recette1);
		Recette recette2 = recetteFactoryForTest.newRecette();
		when(recetteServiceMapper.mapRecetteEntityToRecette(recetteEntity2)).thenReturn(recette2);

		// When
		List<Recette> recettesFounds = recetteService.findAll();

		// Then
		assertTrue(recette1 == recettesFounds.get(0));
		assertTrue(recette2 == recettesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Recette recette = recetteFactoryForTest.newRecette();

		RecetteEntity recetteEntity = recetteEntityFactoryForTest.newRecetteEntity();
		when(recetteJpaRepository.findOne(recette.getId())).thenReturn(null);
		
		recetteEntity = new RecetteEntity();
		recetteServiceMapper.mapRecetteToRecetteEntity(recette, recetteEntity);
		RecetteEntity recetteEntitySaved = recetteJpaRepository.save(recetteEntity);
		
		Recette recetteSaved = recetteFactoryForTest.newRecette();
		when(recetteServiceMapper.mapRecetteEntityToRecette(recetteEntitySaved)).thenReturn(recetteSaved);

		// When
		Recette recetteResult = recetteService.create(recette);

		// Then
		assertTrue(recetteResult == recetteSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Recette recette = recetteFactoryForTest.newRecette();

		RecetteEntity recetteEntity = recetteEntityFactoryForTest.newRecetteEntity();
		when(recetteJpaRepository.findOne(recette.getId())).thenReturn(recetteEntity);

		// When
		Exception exception = null;
		try {
			recetteService.create(recette);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Recette recette = recetteFactoryForTest.newRecette();

		RecetteEntity recetteEntity = recetteEntityFactoryForTest.newRecetteEntity();
		when(recetteJpaRepository.findOne(recette.getId())).thenReturn(recetteEntity);
		
		RecetteEntity recetteEntitySaved = recetteEntityFactoryForTest.newRecetteEntity();
		when(recetteJpaRepository.save(recetteEntity)).thenReturn(recetteEntitySaved);
		
		Recette recetteSaved = recetteFactoryForTest.newRecette();
		when(recetteServiceMapper.mapRecetteEntityToRecette(recetteEntitySaved)).thenReturn(recetteSaved);

		// When
		Recette recetteResult = recetteService.update(recette);

		// Then
		verify(recetteServiceMapper).mapRecetteToRecetteEntity(recette, recetteEntity);
		assertTrue(recetteResult == recetteSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		recetteService.delete(id);

		// Then
		verify(recetteJpaRepository).delete(id);
		
	}

}
