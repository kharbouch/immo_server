/*
 * Created on 29 déc. 2015 ( Time 20:53:42 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.immo.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import com.immo.bean.Recette;
import com.immo.bean.jpa.RecetteEntity;
import com.immo.bean.jpa.DossierEntity;
import com.immo.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class RecetteServiceMapperTest {

	private RecetteServiceMapper recetteServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		recetteServiceMapper = new RecetteServiceMapper();
		recetteServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'RecetteEntity' to 'Recette'
	 * @param recetteEntity
	 */
	@Test
	public void testMapRecetteEntityToRecette() {
		// Given
		RecetteEntity recetteEntity = new RecetteEntity();
		recetteEntity.setBanque(mockValues.nextString(30));
		recetteEntity.setMontant(mockValues.nextLong());
		recetteEntity.setDateDepot(mockValues.nextDate());
		recetteEntity.setRefVille(mockValues.nextLong());
		recetteEntity.setNomPayeur(mockValues.nextString(100));
		recetteEntity.setNumRecette(mockValues.nextString(100));
		recetteEntity.setRefModeRecette(mockValues.nextLong());
		recetteEntity.setEtat(mockValues.nextString(10));
		recetteEntity.setDateCreation(mockValues.nextDate());
		recetteEntity.setDateMaj(mockValues.nextDate());
		recetteEntity.setRefEcheance(mockValues.nextLong());
		recetteEntity.setDossier(new DossierEntity());
		recetteEntity.getDossier().setId(mockValues.nextLong());
		
		// When
		Recette recette = recetteServiceMapper.mapRecetteEntityToRecette(recetteEntity);
		
		// Then
		assertEquals(recetteEntity.getBanque(), recette.getBanque());
		assertEquals(recetteEntity.getMontant(), recette.getMontant());
		assertEquals(recetteEntity.getDateDepot(), recette.getDateDepot());
		assertEquals(recetteEntity.getRefVille(), recette.getRefVille());
		assertEquals(recetteEntity.getNomPayeur(), recette.getNomPayeur());
		assertEquals(recetteEntity.getNumRecette(), recette.getNumRecette());
		assertEquals(recetteEntity.getRefModeRecette(), recette.getRefModeRecette());
		assertEquals(recetteEntity.getEtat(), recette.getEtat());
		assertEquals(recetteEntity.getDateCreation(), recette.getDateCreation());
		assertEquals(recetteEntity.getDateMaj(), recette.getDateMaj());
		assertEquals(recetteEntity.getRefEcheance(), recette.getRefEcheance());
		assertEquals(recetteEntity.getDossier().getId(), recette.getRefDossier());
	}
	
	/**
	 * Test : Mapping from 'Recette' to 'RecetteEntity'
	 */
	@Test
	public void testMapRecetteToRecetteEntity() {
		// Given
		Recette recette = new Recette();
		recette.setBanque(mockValues.nextString(30));
		recette.setMontant(mockValues.nextLong());
		recette.setDateDepot(mockValues.nextDate());
		recette.setRefVille(mockValues.nextLong());
		recette.setNomPayeur(mockValues.nextString(100));
		recette.setNumRecette(mockValues.nextString(100));
		recette.setRefModeRecette(mockValues.nextLong());
		recette.setEtat(mockValues.nextString(10));
		recette.setDateCreation(mockValues.nextDate());
		recette.setDateMaj(mockValues.nextDate());
		recette.setRefEcheance(mockValues.nextLong());
		recette.setRefDossier(mockValues.nextLong());

		RecetteEntity recetteEntity = new RecetteEntity();
		
		// When
		recetteServiceMapper.mapRecetteToRecetteEntity(recette, recetteEntity);
		
		// Then
		assertEquals(recette.getBanque(), recetteEntity.getBanque());
		assertEquals(recette.getMontant(), recetteEntity.getMontant());
		assertEquals(recette.getDateDepot(), recetteEntity.getDateDepot());
		assertEquals(recette.getRefVille(), recetteEntity.getRefVille());
		assertEquals(recette.getNomPayeur(), recetteEntity.getNomPayeur());
		assertEquals(recette.getNumRecette(), recetteEntity.getNumRecette());
		assertEquals(recette.getRefModeRecette(), recetteEntity.getRefModeRecette());
		assertEquals(recette.getEtat(), recetteEntity.getEtat());
		assertEquals(recette.getDateCreation(), recetteEntity.getDateCreation());
		assertEquals(recette.getDateMaj(), recetteEntity.getDateMaj());
		assertEquals(recette.getRefEcheance(), recetteEntity.getRefEcheance());
		assertEquals(recette.getRefDossier(), recetteEntity.getDossier().getId());
	}

}